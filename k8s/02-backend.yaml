# ===========================================
# BACKEND - NODE.JS API
# ===========================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: backend-config
  namespace: kv-infosys
data:
  NODE_ENV: "production"
  PORT: "3000"
  DB_HOST: "postgres-service"
  DB_PORT: "5432"
  API_VERSION: "v1"
  LOG_LEVEL: "info"
  CORS_ORIGIN: "https://kv-infosys.bwi.de"

---
apiVersion: v1
kind: Secret
metadata:
  name: backend-secret
  namespace: kv-infosys
type: Opaque
data:
  # echo -n 'jwt-secret-key-for-kvinfosys-2024!' | base64
  JWT_SECRET: and0LXNlY3JldC1rZXktZm9yLWt2aW5mb3N5cy0yMDI0IQ==
  # echo -n 'api-key-for-external-geo-services' | base64
  GEO_API_KEY: YXBpLWtleS1mb3ItZXh0ZXJuYWwtZ2VvLXNlcnZpY2Vz

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deployment
  namespace: kv-infosys
  labels:
    app: backend
    tier: application
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
        tier: application
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: backend
        image: ghcr.io/bwi/kv-infosys-backend:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: NODE_ENV
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: PORT
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: DB_HOST
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: DB_PORT
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: database
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: username
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: backend-secret
              key: JWT_SECRET
        - name: GEO_API_KEY
          valueFrom:
            secretKeyRef:
              name: backend-secret
              key: GEO_API_KEY
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: app-logs
          mountPath: /app/logs
      volumes:
      - name: tmp
        emptyDir: {}
      - name: app-logs
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: kv-infosys
  labels:
    app: backend
spec:
  selector:
    app: backend
  ports:
  - port: 3000
    targetPort: 3000
    name: http
  type: ClusterIP

# ---
# # Service Monitor f√ºr Prometheus (optional - requires Prometheus Operator)
# apiVersion: monitoring.coreos.com/v1
# kind: ServiceMonitor
# metadata:
#   name: backend-monitor
#   namespace: kv-infosys
#   labels:
#     app: backend
# spec:
#   selector:
#     matchLabels:
#       app: backend
#   endpoints:
#   - port: http
#     path: /metrics
#     interval: 30s

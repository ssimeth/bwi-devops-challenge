name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ghcr.io/bwi/kv-infosys-backend
  IMAGE_NAME_FRONTEND: ghcr.io/bwi/kv-infosys-frontend

jobs:
  # ===========================================
  # VALIDATE & LINT
  # ===========================================
  validate:
    name: Validate & Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        # cache: 'npm'
        # cache-dependency-path: |
        #   backend/package-lock.json
        #   frontend/package-lock.json

    - name: Install backend dependencies
      run: |
        cd backend
        npm ci

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Lint backend
      run: |
        cd backend
        npm run lint
        npm run type-check

    - name: Lint frontend
      run: |
        cd frontend
        npm run lint
        npm run type-check

    - name: Validate Kubernetes manifests
      uses: instrumenta/kubeval-action@master
      with:
        files: k8s/

  # ===========================================
  # TEST
  # ===========================================
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: validate
    services:
      postgres:
        image: postgis/postgis:15-3.3
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd backend && npm ci
        cd ../frontend && npm ci

    - name: Run backend tests
      env:
        DATABASE_URL: postgres://test_user:test_password@localhost:5432/test_db
        JWT_SECRET: test_secret
        NODE_ENV: test
      run: |
        cd backend
        npm test

    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        files: ./backend/coverage/lcov.info,./frontend/coverage/lcov.info
        fail_ci_if_error: false

  # ===========================================
  # SECURITY SCANNING
  # ===========================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --all-projects --severity-threshold=high

  # ===========================================
  # BUILD CONTAINERS
  # ===========================================
  build:
    name: Build Container Images
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push'
    outputs:
      backend-image: ${{ steps.backend-meta.outputs.tags }}
      frontend-image: ${{ steps.frontend-meta.outputs.tags }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract backend metadata
      id: backend-meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_NAME_BACKEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.backend-meta.outputs.tags }}
        labels: ${{ steps.backend-meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          NODE_ENV=production
          BUILD_DATE=${{ fromJSON(steps.backend-meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}
          VERSION=${{ fromJSON(steps.backend-meta.outputs.json).labels['org.opencontainers.image.version'] }}

    - name: Extract frontend metadata
      id: frontend-meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.frontend-meta.outputs.tags }}
        labels: ${{ steps.frontend-meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy container scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.IMAGE_NAME_BACKEND }}:latest
        format: 'sarif'
        output: 'trivy-backend.sarif'

    - name: Upload container scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-backend.sarif'

  # ===========================================
  # DEPLOY TO DEVELOPMENT
  # ===========================================
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure OTC CLI
      run: |
        curl -LO https://github.com/opentelekomcloud/otc-tools/releases/latest/download/otc-tools-linux-amd64.tar.gz
        tar -xzf otc-tools-linux-amd64.tar.gz
        sudo mv otc /usr/local/bin/
        otc configure --username ${{ secrets.OTC_USERNAME }} --password ${{ secrets.OTC_PASSWORD }} --domain-name ${{ secrets.OTC_DOMAIN_NAME }} --project-name ${{ secrets.OTC_PROJECT_NAME }} --region eu-de

    - name: Get kubeconfig
      run: |
        otc cce cluster kubeconfig --cluster-id ${{ secrets.DEV_CLUSTER_ID }} > kubeconfig
        export KUBECONFIG=./kubeconfig

    - name: Deploy to Kubernetes
      run: |
        export KUBECONFIG=./kubeconfig
        
        # Update image tags
        sed -i "s|ghcr.io/bwi/kv-infosys-backend:latest|${{ needs.build.outputs.backend-image }}|g" k8s/*.yaml
        sed -i "s|ghcr.io/bwi/kv-infosys-frontend:latest|${{ needs.build.outputs.frontend-image }}|g" k8s/*.yaml
        
        # Apply manifests
        kubectl apply -f k8s/
        
        # Wait for deployment
        kubectl rollout status deployment/backend-deployment -n kv-infosys --timeout=300s
        kubectl rollout status deployment/frontend-deployment -n kv-infosys --timeout=300s

    - name: Run smoke tests
      run: |
        export KUBECONFIG=./kubeconfig
        
        # Get service URL
        FRONTEND_URL=$(kubectl get ingress kv-infosys-ingress -n kv-infosys -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        
        # Basic health checks
        curl -f http://$FRONTEND_URL/nginx-health || exit 1
        
        # API health check
        kubectl port-forward service/backend-service 3000:3000 -n kv-infosys &
        sleep 5
        curl -f http://localhost:3000/health || exit 1

  # ===========================================
  # DEPLOY TO STAGING
  # ===========================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, deploy-dev]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure OTC CLI
      run: |
        curl -LO https://github.com/opentelekomcloud/otc-tools/releases/latest/download/otc-tools-linux-amd64.tar.gz
        tar -xzf otc-tools-linux-amd64.tar.gz
        sudo mv otc /usr/local/bin/
        otc configure --username ${{ secrets.OTC_USERNAME }} --password ${{ secrets.OTC_PASSWORD }} --domain-name ${{ secrets.OTC_DOMAIN_NAME }} --project-name ${{ secrets.OTC_PROJECT_NAME }} --region eu-de

    - name: Get kubeconfig
      run: |
        otc cce cluster kubeconfig --cluster-id ${{ secrets.STAGING_CLUSTER_ID }} > kubeconfig
        export KUBECONFIG=./kubeconfig

    - name: Deploy to Kubernetes
      run: |
        export KUBECONFIG=./kubeconfig
        
        # Update image tags
        sed -i "s|ghcr.io/bwi/kv-infosys-backend:latest|${{ needs.build.outputs.backend-image }}|g" k8s/*.yaml
        sed -i "s|ghcr.io/bwi/kv-infosys-frontend:latest|${{ needs.build.outputs.frontend-image }}|g" k8s/*.yaml
        
        # Apply manifests
        kubectl apply -f k8s/
        
        # Wait for deployment
        kubectl rollout status deployment/backend-deployment -n kv-infosys --timeout=600s
        kubectl rollout status deployment/frontend-deployment -n kv-infosys --timeout=600s

    - name: Run integration tests
      run: |
        export KUBECONFIG=./kubeconfig
        
        # Install test dependencies
        npm install --prefix ./tests
        
        # Run comprehensive tests
        npm test --prefix ./tests
        # Update deployment names for green
        sed -i 's|backend-deployment|backend-deployment-green|g' k8s-green/*.yaml
        sed -i 's|frontend-deployment|frontend-deployment-green|g' k8s-green/*.yaml
        sed -i 's|backend-service|backend-service-green|g' k8s-green/*.yaml
        sed -i 's|frontend-service|frontend-service-green|g' k8s-green/*.yaml
        
        # Deploy green environment
        kubectl apply -f k8s-green/
        
        # Wait for green deployment
        kubectl rollout status deployment/backend-deployment-green -n kv-infosys --timeout=600s
        kubectl rollout status deployment/frontend-deployment-green -n kv-infosys --timeout=600s
        
        # Health check green environment
        kubectl port-forward service/backend-service-green 3001:3000 -n kv-infosys &
        sleep 10
        curl -f http://localhost:3001/health || exit 1
        
        # Switch traffic to green (update ingress)
        kubectl patch ingress kv-infosys-ingress -n kv-infosys -p '{"spec":{"rules":[{"host":"kv-infosys.bwi.de","http":{"paths":[{"path":"/","pathType":"Prefix","backend":{"service":{"name":"frontend-service-green","port":{"number":80}}}}]}}]}}'
        
        # Wait and verify
        sleep 30
        
        # Remove blue deployment
        kubectl delete deployment backend-deployment frontend-deployment -n kv-infosys --ignore-not-found=true
        kubectl delete service backend-service frontend-service -n kv-infosys --ignore-not-found=true
        
        # Rename green to blue for next deployment
        kubectl patch deployment backend-deployment-green -n kv-infosys -p '{"metadata":{"name":"backend-deployment"}}'
        kubectl patch deployment frontend-deployment-green -n kv-infosys -p '{"metadata":{"name":"frontend-deployment"}}'
        kubectl patch service backend-service-green -n kv-infosys -p '{"metadata":{"name":"backend-service"}}'
        kubectl patch service frontend-service-green -n kv-infosys -p '{"metadata":{"name":"frontend-service"}}'

    - name: Production health check
      run: |
        export KUBECONFIG=./kubeconfig
        
        # Comprehensive health checks
        FRONTEND_URL=$(kubectl get ingress kv-infosys-ingress -n kv-infosys -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        
        # Frontend check
        curl -f http://$FRONTEND_URL/ || exit 1
        curl -f http://$FRONTEND_URL/nginx-health || exit 1
        
        # Backend API check
        curl -f http://$FRONTEND_URL/api/health || exit 1
        
        # Database connectivity check
        kubectl exec deployment/backend-deployment -n kv-infosys -- npm run db:check || exit 1

    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      if: success()
      with:
        status: success
        channel: '#deployments'
        message: 'Production deployment successful! :rocket:'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify deployment failure
      uses: 8398a7/action-slack@v3
      if: failure()
      with:
        status: failure
        channel: '#deployments'
        message: 'Production deployment failed! :warning:'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ===========================================
  # ROLLBACK (Manual trigger)
  # ===========================================
  rollback:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure OTC CLI
      run: |
        curl -LO https://github.com/opentelekomcloud/otc-tools/releases/latest/download/otc-tools-linux-amd64.tar.gz
        tar -xzf otc-tools-linux-amd64.tar.gz
        sudo mv otc /usr/local/bin/
        otc configure --username ${{ secrets.OTC_USERNAME }} --password ${{ secrets.OTC_PASSWORD }} --domain-name ${{ secrets.OTC_DOMAIN_NAME }} --project-name ${{ secrets.OTC_PROJECT_NAME }} --region eu-de

    - name: Get kubeconfig and rollback
      run: |
        otc cce cluster kubeconfig --cluster-id ${{ secrets.PROD_CLUSTER_ID }} > kubeconfig
        export KUBECONFIG=./kubeconfig
        
        # Rollback to previous version
        kubectl rollout undo deployment/backend-deployment -n kv-infosys
        kubectl rollout undo deployment/frontend-deployment -n kv-infosys
        
        # Wait for rollback
        kubectl rollout status deployment/backend-deployment -n kv-infosys --timeout=300s
        kubectl rollout status deployment/frontend-deployment -n kv-infosys --timeout=300s

    - name: Verify rollback
      run: |
        export KUBECONFIG=./kubeconfig
        
        # Health checks after rollback
        FRONTEND_URL=$(kubectl get ingress kv-infosys-ingress -n kv-infosys -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        curl -f http://$FRONTEND_URL/api/health || exit 1

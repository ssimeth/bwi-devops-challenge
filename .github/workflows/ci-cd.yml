name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ghcr.io/ssimeth/bwi-devops-challenge/backend
  IMAGE_NAME_FRONTEND: ghcr.io/ssimeth/bwi-devops-challenge/frontend

permissions: write-all #TODO: Adjust permissions as needed

jobs:
  # ===========================================
  # VALIDATE & LINT
  # ===========================================
  validate:
    name: Validate & Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          frontend/package-lock.json

    - name: Install backend dependencies
      run: |
        cd backend
        npm ci

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Lint backend
      run: |
        cd backend
        npm run lint
        npm run type-check

    - name: Lint frontend
      run: |
        cd frontend
        npm run lint
        npm run type-check

    - name: Validate Kubernetes manifests
      uses: instrumenta/kubeval-action@master
      with:
        files: k8s/

  # ===========================================
  # TEST
  # ===========================================
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: validate
    services:
      postgres:
        image: postgis/postgis:15-3.3
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd backend && npm ci
        cd ../frontend && npm ci

    - name: Run backend tests
      env:
        DATABASE_URL: postgres://test_user:test_password@localhost:5432/test_db
        JWT_SECRET: test_secret
        NODE_ENV: test
      run: |
        cd backend
        npm test

    - name: Run frontend tests
      run: |
        cd frontend
        npm test 

    #TODO: Uncomment when code coverage is set up
    # - name: Upload coverage reports
    #   uses: codecov/codecov-action@v4
    #   with:
    #     files: ./backend/coverage/lcov.info,./frontend/coverage/lcov.info
    #     fail_ci_if_error: false

  # ===========================================
  # SECURITY SCANNING
  # ===========================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    #TODO: comment out
    - name: Run Snyk security scan
      continue-on-error: true 
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --all-projects --severity-threshold=high

  # ===========================================
  # BUILD CONTAINERS
  # ===========================================
  build:
    name: Build Container Images
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push'
    outputs:
      backend-image: ${{ steps.backend-meta.outputs.tags }}
      frontend-image: ${{ steps.frontend-meta.outputs.tags }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_TOKEN || secrets.GITHUB_TOKEN }}

    - name: Extract backend metadata
      id: backend-meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_NAME_BACKEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        platforms: linux/amd64
        push: true
        tags: ${{ steps.backend-meta.outputs.tags }}
        labels: ${{ steps.backend-meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          NODE_ENV=production
          BUILD_DATE=${{ fromJSON(steps.backend-meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}
          VERSION=${{ fromJSON(steps.backend-meta.outputs.json).labels['org.opencontainers.image.version'] }}

    - name: Extract frontend metadata
      id: frontend-meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        platforms: linux/amd64
        push: true
        tags: ${{ steps.frontend-meta.outputs.tags }}
        labels: ${{ steps.frontend-meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    #TODO: Uncommented for speed up pipeline, but can be useful for security
    # - name: Run Trivy container scan
    #   uses: aquasecurity/trivy-action@master
    #   with:
    #     image-ref: ${{ env.IMAGE_NAME_BACKEND }}:latest
    #     format: 'sarif'
    #     output: 'trivy-backend.sarif'

    # - name: Upload container scan results
    #   uses: github/codeql-action/upload-sarif@v3
    #   if: always()
    #   with:
    #     sarif_file: 'trivy-backend.sarif'

  # ===========================================
  # DEPLOY TO PRODUCTION
  # ===========================================
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' # Only deploy on main branch
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v4
      with:
        version: 'latest'

    - name: Configure kubeconfig #TODO: get kubeconfig from Terraform output
      run: |
        echo "${{ secrets.KUBECONFIG }}" | base64 -d > kubeconfig
        export KUBECONFIG=./kubeconfig

    - name: Deploy to Kubernetes
      run: |
        export KUBECONFIG=./kubeconfig
        
        # Update image tags
        sed -i "s|ghcr.io/ssimeth/bwi-devops-challenge/backend:latest|${{ needs.build.outputs.backend-image }}|g" k8s/*.yaml
        sed -i "s|ghcr.io/ssimeth/bwi-devops-challenge/frontend:latest|${{ needs.build.outputs.frontend-image }}|g" k8s/*.yaml
        
        # Apply manifests
        kubectl apply -f k8s/
        
        # Wait for deployment
        kubectl rollout status deployment/backend-deployment -n kv-infosys --timeout=600s
        kubectl rollout status deployment/frontend-deployment -n kv-infosys --timeout=600s

    - name: Run health checks
      run: |
        export KUBECONFIG=./kubeconfig
        
        # Get service URL
        FRONTEND_URL=$(kubectl get ingress kv-infosys-ingress -n kv-infosys -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        
        # Comprehensive health checks
        curl -f http://$FRONTEND_URL/nginx-health || exit 1
        curl -f http://$FRONTEND_URL/ || exit 1
        
        # API health check
        kubectl port-forward service/backend-service 3000:3000 -n kv-infosys &
        sleep 5
        curl -f http://localhost:3000/health || exit 1

    #TODO: Uncomment when Slack integration is set up
    # - name: Notify deployment success
    #   uses: 8398a7/action-slack@v3
    #   if: success()
    #   with:
    #     status: success
    #     channel: '#deployments'
    #     message: 'Production deployment successful! :rocket:'
    #   env:
    #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}


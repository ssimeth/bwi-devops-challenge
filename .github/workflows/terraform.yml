name: Terraform Infrastructure

on:
  push:
    branches: [ main ]
    paths: 
      - 'terraform/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'terraform/**'
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy

env:
  TF_VERSION: '1.5.0'
  TF_WORKING_DIR: './terraform'

jobs:
  terraform-validate:
    name: Terraform Validate
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Format Check
      run: terraform fmt -check -recursive
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Terraform Init
      run: terraform init -backend=false
      working-directory: ${{ env.TF_WORKING_DIR }}
      env:
        TF_VAR_otc_tenant_id: ${{ secrets.OTC_TENANT_ID }}
        TF_VAR_otc_access_key: ${{ secrets.OTC_ACCESS_KEY }}
        TF_VAR_otc_secret_key: ${{ secrets.OTC_SECRET_KEY }}

    - name: Terraform Validate
      run: terraform validate
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Run tfsec security scan
      uses: aquasecurity/tfsec-action@v1.0.3
      with:
        working_directory: ${{ env.TF_WORKING_DIR }}

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: terraform init
      working-directory: ${{ env.TF_WORKING_DIR }}
      env:
        TF_VAR_otc_tenant_id: ${{ secrets.OTC_TENANT_ID }}
        TF_VAR_otc_access_key: ${{ secrets.OTC_ACCESS_KEY }}
        TF_VAR_otc_secret_key: ${{ secrets.OTC_SECRET_KEY }}

    - name: Terraform Plan
      run: terraform plan -no-color -input=false -out=tfplan
      working-directory: ${{ env.TF_WORKING_DIR }}
      env:
        TF_VAR_otc_tenant_id: ${{ secrets.OTC_TENANT_ID }}
        TF_VAR_otc_access_key: ${{ secrets.OTC_ACCESS_KEY }}
        TF_VAR_otc_secret_key: ${{ secrets.OTC_SECRET_KEY }}

    - name: Save Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan
        path: ${{ env.TF_WORKING_DIR }}/tfplan
        retention-days: 30

    - name: Comment Terraform Plan on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const plan = fs.readFileSync('${{ env.TF_WORKING_DIR }}/tfplan.txt', 'utf8');
          const maxGitHubBodyCharacters = 65536;
          
          function chunkSubstr(str, size) {
            const numChunks = Math.ceil(str.length / size)
            const chunks = new Array(numChunks)
            for (let i = 0, o = 0; i < numChunks; ++i, o += size) {
              chunks[i] = str.substr(o, size)
            }
            return chunks
          }
          
          const body = plan.length > maxGitHubBodyCharacters ? 
            `#### Terraform Plan Output
            \`\`\`diff
            Plan is too large to display in GitHub comment. Please check the full plan in the workflow logs.
            \`\`\`` :
            `#### Terraform Plan Output
            \`\`\`diff
            ${plan}
            \`\`\``;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply'))
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: terraform init
      working-directory: ${{ env.TF_WORKING_DIR }}
      env:
        TF_VAR_otc_tenant_id: ${{ secrets.OTC_TENANT_ID }}
        TF_VAR_otc_access_key: ${{ secrets.OTC_ACCESS_KEY }}
        TF_VAR_otc_secret_key: ${{ secrets.OTC_SECRET_KEY }}

    - name: Terraform Apply
      run: terraform apply -auto-approve -input=false
      working-directory: ${{ env.TF_WORKING_DIR }}
      env:
        TF_VAR_otc_tenant_id: ${{ secrets.OTC_TENANT_ID }}
        TF_VAR_otc_access_key: ${{ secrets.OTC_ACCESS_KEY }}
        TF_VAR_otc_secret_key: ${{ secrets.OTC_SECRET_KEY }}

    - name: Save Terraform Outputs
      run: |
        terraform output -json > terraform-outputs.json
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Upload Terraform Outputs
      uses: actions/upload-artifact@v4
      with:
        name: terraform-outputs
        path: ${{ env.TF_WORKING_DIR }}/terraform-outputs.json
        retention-days: 90

  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: terraform init
      working-directory: ${{ env.TF_WORKING_DIR }}
      env:
        TF_VAR_otc_tenant_id: ${{ secrets.OTC_TENANT_ID }}
        TF_VAR_otc_access_key: ${{ secrets.OTC_ACCESS_KEY }}
        TF_VAR_otc_secret_key: ${{ secrets.OTC_SECRET_KEY }}

    - name: Terraform Destroy
      run: terraform destroy -auto-approve -input=false
      working-directory: ${{ env.TF_WORKING_DIR }}
      env:
        TF_VAR_otc_tenant_id: ${{ secrets.OTC_TENANT_ID }}
        TF_VAR_otc_access_key: ${{ secrets.OTC_ACCESS_KEY }}
        TF_VAR_otc_secret_key: ${{ secrets.OTC_SECRET_KEY }}
